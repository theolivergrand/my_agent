#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è Google Cloud Vision + Phi Vision –¥–ª—è UI –∞–Ω–∞–ª–∏–∑–∞
"""

import asyncio
import sys
from pathlib import Path
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.append(str(Path(__file__).parent))

try:
    from enhanced_agent import EnhancedUIAnalysisAgent
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    sys.exit(1)

class GooglePhiComparison:
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ Google Cloud Vision + Phi Vision"""
    
    def __init__(self):
        self.agent = None
    
    async def run_comparison_test(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        print("üîç –¢–ï–°–¢: Google Cloud Vision + Phi Vision –¥–ª—è UI –∞–Ω–∞–ª–∏–∑–∞")
        print("=" * 60)
        
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
        await self._init_agent()
        
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ UI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        test_image = self._create_test_ui_image()
        
        # 3. –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        await self._compare_analysis_methods(test_image)
        
        # 4. –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        await self._analyze_existing_images()
        
        # 5. –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self._print_recommendations()
    
    async def _init_agent(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞"""
        print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Enhanced UI Analysis Agent...")
        
        try:
            self.agent = EnhancedUIAnalysisAgent(
                anthropic_api_key=None,  # Claude –æ—Ç–∫–ª—é—á–µ–Ω
                enable_hybrid=True
            )
            
            capabilities = self.agent.get_analysis_capabilities()
            print("üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
            for service, available in capabilities.items():
                status = "‚úÖ –ê–ö–¢–ò–í–ï–ù" if available else "‚ùå –ù–ï–ê–ö–¢–ò–í–ï–ù"
                print(f"  ‚Ä¢ {service}: {status}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
            return False
    
    def _create_test_ui_image(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ UI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        print("\nüñºÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ UI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            existing_images = []
            for pattern in ["*.png", "*.jpg", "uploads/*.png", "learning_data/*/*.png"]:
                existing_images.extend(Path(".").glob(pattern))
            
            if existing_images:
                test_image = existing_images[0]
                print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {test_image}")
                return test_image
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å PIL
            from PIL import Image, ImageDraw, ImageFont
            
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 800x600
            img = Image.new('RGB', (800, 600), color='#f0f0f0')
            draw = ImageDraw.Draw(img)
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            draw.rectangle([0, 0, 800, 80], fill='#2196F3')
            draw.text((50, 30), "Mobile App UI Test", fill='white')
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            draw.rectangle([50, 120, 200, 170], fill='#4CAF50')
            draw.text((80, 140), "Home", fill='white')
            
            draw.rectangle([220, 120, 370, 170], fill='#FF9800')
            draw.text((250, 140), "Profile", fill='white')
            
            draw.rectangle([390, 120, 540, 170], fill='#9C27B0')
            draw.text((420, 140), "Settings", fill='white')
            
            # –ü–æ–ª—è –≤–≤–æ–¥–∞
            draw.rectangle([50, 220, 550, 270], fill='white', outline='gray', width=2)
            draw.text((60, 240), "Enter username...", fill='gray')
            
            draw.rectangle([50, 290, 550, 340], fill='white', outline='gray', width=2)
            draw.text((60, 310), "Enter password...", fill='gray')
            
            # –ß–µ–∫–±–æ–∫—Å—ã
            draw.rectangle([50, 370, 70, 390], fill='white', outline='gray', width=2)
            draw.text((80, 375), "Remember me", fill='black')
            
            draw.rectangle([50, 400, 70, 420], fill='white', outline='gray', width=2)
            draw.text((80, 405), "Terms and conditions", fill='black')
            
            # –ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
            draw.rectangle([50, 450, 250, 500], fill='#F44336')
            draw.text((120, 470), "LOGIN", fill='white')
            
            # –ò–∫–æ–Ω–∫–∏
            draw.ellipse([600, 200, 650, 250], fill='#03A9F4')
            draw.text((615, 220), "üìß", fill='white')
            
            draw.ellipse([600, 270, 650, 320], fill='#8BC34A')
            draw.text((615, 290), "üìû", fill='white')
            
            draw.ellipse([600, 340, 650, 390], fill='#E91E63')
            draw.text((615, 360), "‚öôÔ∏è", fill='white')
            
            # –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            for i, item in enumerate(["News Feed", "Messages", "Notifications", "Gallery"]):
                y = 450 + i * 30
                draw.rectangle([300, y, 550, y + 25], fill='lightblue', outline='blue')
                draw.text((310, y + 5), item, fill='black')
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            test_image_path = Path("google_phi_test_ui.png")
            img.save(test_image_path, dpi=(150, 150))
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {test_image_path}")
            return test_image_path
            
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
            return None
    
    async def _compare_analysis_methods(self, test_image):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        if not test_image or not self.agent:
            print("‚ö†Ô∏è –¢–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω - –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –∞–≥–µ–Ω—Ç–∞")
            return
        
        print(f"\nüîÑ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {test_image.name}")
        print("-" * 50)
        
        methods = [
            ("google_only", "üîç –¢–æ–ª—å–∫–æ Google Cloud Vision"),
            ("phi", "‚ö° –¢–æ–ª—å–∫–æ Phi Vision 3.5"),
            ("hybrid", "üöÄ –ì–∏–±—Ä–∏–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (Google + Phi)")
        ]
        
        results = {}
        
        for method_id, method_name in methods:
            print(f"\n{method_name}...")
            
            try:
                start_time = datetime.now()
                
                result = await self.agent.analyze_screenshot_enhanced(
                    str(test_image),
                    analysis_method=method_id
                )
                
                end_time = datetime.now()
                duration = (end_time - start_time).total_seconds()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                results[method_id] = {
                    "duration": duration,
                    "confidence": result.get("confidence_score", 0),
                    "result": result
                }
                
                print(f"  ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {duration:.2f}—Å, confidence: {result.get('confidence_score', 0):.2f}")
                
                # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                if method_id == "google_only" and "google_vision" in result:
                    gv = result["google_vision"]
                    stats = gv.get("statistics", {})
                    print(f"  üìä Google: {stats.get('objects_count', 0)} –æ–±—ä–µ–∫—Ç–æ–≤, {stats.get('texts_count', 0)} —Ç–µ–∫—Å—Ç–æ–≤")
                
                elif method_id == "phi" and "hybrid_vision" in result:
                    hv = result["hybrid_vision"]
                    if "phi_analysis" in hv:
                        phi_text = hv["phi_analysis"][:100]
                        print(f"  üîç Phi: {phi_text}...")
                
                elif method_id == "hybrid":
                    combined = result.get("combined_analysis", {})
                    summary = combined.get("summary", {})
                    print(f"  üéØ –ì–∏–±—Ä–∏–¥–Ω—ã–π: {len(summary)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–Ω–∞–ª–∏–∑–∞")
                
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                results[method_id] = {"error": str(e)}
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self._compare_results(results)
    
    def _compare_results(self, results):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤"""
        print(f"\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print("-" * 50)
        
        print("–ú–µ—Ç–æ–¥\t\t\t–í—Ä–µ–º—è\t–¢–æ—á–Ω–æ—Å—Ç—å\t–°—Ç–∞—Ç—É—Å")
        for method_id, data in results.items():
            if "error" in data:
                print(f"{method_id:15}\t-\t-\t\t‚ùå –û—à–∏–±–∫–∞")
            else:
                duration = data.get("duration", 0)
                confidence = data.get("confidence", 0)
                print(f"{method_id:15}\t{duration:.2f}—Å\t{confidence:.2f}\t\t‚úÖ OK")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ:")
        
        if "google_only" in results and "error" not in results["google_only"]:
            print("  ‚Ä¢ Google Cloud Vision: –ò–¥–µ–∞–ª–µ–Ω –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –±–∞–∑–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤")
        
        if "phi" in results and "error" not in results["phi"]:
            print("  ‚Ä¢ Phi Vision 3.5: –õ—É—á—à–µ –ø–æ–Ω–∏–º–∞–µ—Ç UI –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        if "hybrid" in results and "error" not in results["hybrid"]:
            print("  ‚Ä¢ –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å, –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –æ–±–µ–∏—Ö –º–æ–¥–µ–ª–µ–π")
    
    async def _analyze_existing_images(self):
        """–ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø—Ä–æ–µ–∫—Ç–µ"""
        print(f"\nüìÅ –ê–ù–ê–õ–ò–ó –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
        print("-" * 50)
        
        # –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø—Ä–æ–µ–∫—Ç–µ
        image_locations = [
            "uploads/*.png",
            "learning_data/*/*.png",
            "*.png",
            "*.jpg"
        ]
        
        found_images = []
        for pattern in image_locations:
            found_images.extend(Path(".").glob(pattern))
        
        if not found_images:
            print("‚ö†Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for i, image_path in enumerate(found_images[:2]):
            print(f"\nüñºÔ∏è –ê–Ω–∞–ª–∏–∑: {image_path.name}")
            
            try:
                result = await self.agent.analyze_screenshot_enhanced(
                    str(image_path),
                    analysis_method="hybrid"
                )
                
                confidence = result.get("confidence_score", 0)
                print(f"  ‚úÖ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f}")
                
                # –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if "google_vision" in result:
                    gv_stats = result["google_vision"].get("statistics", {})
                    print(f"  üìä Google: {gv_stats.get('texts_count', 0)} —Ç–µ–∫—Å—Ç–æ–≤")
                
                if "hybrid_vision" in result and "phi_analysis" in result["hybrid_vision"]:
                    phi_preview = result["hybrid_vision"]["phi_analysis"][:80]
                    print(f"  üîç Phi: {phi_preview}...")
                
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    def _print_recommendations(self):
        """–ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        print(f"\n" + "=" * 60)
        print("üéØ –ò–¢–û–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –í–ê–®–ï–ì–û –ü–†–û–ï–ö–¢–ê")
        print("=" * 60)
        
        print("""
üî• –û–ü–¢–ò–ú–ê–õ–¨–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø: Google Cloud Vision + Phi Vision 3.5

üìã –†–ê–ó–î–ï–õ–ï–ù–ò–ï –ó–ê–î–ê–ß:
  ‚Ä¢ Google Cloud Vision:
    ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å UI (OCR)
    ‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏ —Ñ–æ—Ä–º
    ‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
    ‚úÖ –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å

  ‚Ä¢ Phi Vision 3.5:
    ‚úÖ –ü–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–∫–Ω–æ–ø–∫–∏, –º–µ–Ω—é, —Ñ–æ—Ä–º—ã)
    ‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞ (UX)
    ‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    ‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è gaming/mobile UI –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤

üöÄ –ì–ò–ë–†–ò–î–ù–´–ô –ü–û–î–•–û–î:
  1. Google –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ–∞–∫—Ç—ã (—Ç–µ–∫—Å—Ç, –æ–±—ä–µ–∫—Ç—ã, –ø–æ–∑–∏—Ü–∏–∏)
  2. Phi –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–º—ã—Å–ª –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç UI
  3. –°–∏—Å—Ç–µ–º–∞ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É
  4. –°–æ–∑–¥–∞–µ—Ç—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç

üí∞ –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ê–Ø –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨:
  ‚Ä¢ Google Cloud Vision: ~$1.50 –∑–∞ 1000 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  ‚Ä¢ Phi Vision 3.5: –ë–µ—Å–ø–ª–∞—Ç–Ω–æ (–ª–æ–∫–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞)
  ‚Ä¢ –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ –∫–∞—á–µ—Å—Ç–≤–∞!

üéØ –î–õ–Ø –í–ê–®–ï–ì–û UI –î–ê–¢–ê–°–ï–¢–ê:
  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  ‚Ä¢ Google –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞  
  ‚Ä¢ Phi –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è UI –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
  ‚Ä¢ –ö–æ–º–±–∏–Ω–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è ground truth""")
        
        print("=" * 60)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        tester = GooglePhiComparison()
        await tester.run_comparison_test()
    except KeyboardInterrupt:
        print("\n‚ùå –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    asyncio.run(main())
