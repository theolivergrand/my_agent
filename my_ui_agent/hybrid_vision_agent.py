import asyncio
import json
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Union

# –ò–º–ø–æ—Ä—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
try:
    from phi_vision_agent import PhiVisionAgent
    PHI_AVAILABLE = True
except ImportError:
    PHI_AVAILABLE = False
    logging.warning("Phi Vision –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ torch –∏ transformers.")

try:
    from claude_vision_agent import ClaudeVisionAgent
    CLAUDE_AVAILABLE = True
except ImportError:
    CLAUDE_AVAILABLE = False
    logging.warning("Claude Vision –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ anthropic.")

from constants import UI_ELEMENTS, GAMING_UI_TAGS

class HybridUIVisionAgent:
    def __init__(self, anthropic_api_key: str = None, enable_phi: bool = True, enable_claude: bool = True):
        self.phi_agent = None
        self.claude_agent = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Phi Vision
        if enable_phi and PHI_AVAILABLE:
            try:
                self.phi_agent = PhiVisionAgent()
                logging.info("‚úÖ Phi Vision –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Phi Vision: {str(e)}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Claude Vision
        if enable_claude and CLAUDE_AVAILABLE and anthropic_api_key:
            try:
                self.claude_agent = ClaudeVisionAgent(anthropic_api_key)
                logging.info("‚úÖ Claude Vision –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Claude Vision: {str(e)}")
        
        self.ui_taxonomy = UI_ELEMENTS
        self.gaming_tags = GAMING_UI_TAGS
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        available_services = []
        if self.phi_agent:
            available_services.append("Phi Vision")
        if self.claude_agent:
            available_services.append("Claude Vision")
        
        if available_services:
            logging.info(f"üöÄ –ì–∏–±—Ä–∏–¥–Ω—ã–π –∞–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏: {', '.join(available_services)}")
        else:
            logging.warning("‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω —Å–µ—Ä–≤–∏—Å Vision –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!")
    
    def get_available_services(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        services = []
        if self.phi_agent:
            services.append("phi")
        if self.claude_agent:
            services.append("claude")
        return services
    
    async def analyze_ui_with_claude(self, image_path: str, analysis_type: str = "comprehensive") -> str:
        """–ê–Ω–∞–ª–∏–∑ UI —á–µ—Ä–µ–∑ Claude"""
        if not self.claude_agent:
            return "Claude Vision –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        if analysis_type == "comprehensive":
            return await self.claude_agent.analyze_ui_comprehensive(
                image_path, self.ui_taxonomy, self.gaming_tags
            )
        else:
            return await self.claude_agent.analyze_ui_quick(image_path)
    
    def analyze_ui_with_phi(self, image_path: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ UI —á–µ—Ä–µ–∑ Phi"""
        if not self.phi_agent:
            return "Phi Vision –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        return self.phi_agent.analyze_ui_elements(image_path)
    
    async def smart_ui_analysis(self, image_path: str, strategy: str = "auto") -> Dict:
        """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π UI –∞–Ω–∞–ª–∏–∑"""
        results = {
            "image_path": str(image_path),
            "timestamp": datetime.now().isoformat(),
            "strategy": strategy,
            "available_services": self.get_available_services()
        }
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if strategy == "auto":
            strategy = self._choose_strategy()
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if strategy == "phi" and self.phi_agent:
            logging.info("üîÑ –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Phi Vision...")
            results["phi_analysis"] = self.analyze_ui_with_phi(image_path)
            results["method_used"] = "phi_only"
        
        elif strategy == "claude" and self.claude_agent:
            logging.info("üîÑ –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Claude Vision...")
            results["claude_analysis"] = await self.analyze_ui_with_claude(image_path, "comprehensive")
            results["method_used"] = "claude_only"
        
        elif strategy == "hybrid":
            # –ì–∏–±—Ä–∏–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            if self.phi_agent:
                logging.info("üîÑ Phi Vision –∞–Ω–∞–ª–∏–∑...")
                results["phi_analysis"] = self.analyze_ui_with_phi(image_path)
            
            if self.claude_agent:
                logging.info("üîÑ Claude Vision –∞–Ω–∞–ª–∏–∑...")
                results["claude_analysis"] = await self.analyze_ui_with_claude(image_path, "comprehensive")
            
            results["method_used"] = "hybrid"
            results["combined_insights"] = self._combine_analyses(
                results.get("phi_analysis", ""), 
                results.get("claude_analysis", "")
            )
        
        elif strategy == "fallback":
            # –ü–æ–ø—ã—Ç–∫–∞ —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º
            if self.phi_agent:
                logging.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ Phi Vision...")
                phi_result = self.analyze_ui_with_phi(image_path)
                results["phi_analysis"] = phi_result
                
                # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π, –ø—Ä–æ–±—É–µ–º Claude
                if self.claude_agent and self._is_poor_result(phi_result):
                    logging.info("üîÑ Fallback –∫ Claude Vision...")
                    results["claude_analysis"] = await self.analyze_ui_with_claude(image_path, "quick")
                    results["method_used"] = "fallback_to_claude"
                else:
                    results["method_used"] = "phi_only"
            elif self.claude_agent:
                logging.info("üîÑ –¢–æ–ª—å–∫–æ Claude Vision –¥–æ—Å—Ç—É–ø–µ–Ω...")
                results["claude_analysis"] = await self.analyze_ui_with_claude(image_path, "comprehensive")
                results["method_used"] = "claude_only"
        
        # –†–∞—Å—á–µ—Ç confidence score
        results["confidence_score"] = self._calculate_confidence(results)
        
        return results
    
    def _choose_strategy(self) -> str:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        if self.phi_agent and self.claude_agent:
            return "hybrid"
        elif self.claude_agent:
            return "claude"
        elif self.phi_agent:
            return "phi"
        else:
            return "none"
    
    def _is_poor_result(self, result: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        if not result or len(result) < 50:
            return True
        
        poor_indicators = ["error", "–Ω–µ —É–¥–∞–ª–æ—Å—å", "failed", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"]
        return any(indicator in result.lower() for indicator in poor_indicators)
    
    def _combine_analyses(self, phi_result: str, claude_result: str) -> Dict:
        """–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        return {
            "phi_overview": phi_result[:200] + "..." if len(phi_result) > 200 else phi_result,
            "claude_detailed": claude_result[:300] + "..." if len(claude_result) > 300 else claude_result,
            "recommendation": self._generate_recommendation(phi_result, claude_result),
            "consensus_points": self._find_consensus(phi_result, claude_result)
        }
    
    def _generate_recommendation(self, phi_result: str, claude_result: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if phi_result and claude_result:
            return "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Claude –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏, Phi –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"
        elif claude_result:
            return "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç Claude –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏–∑–∞"
        elif phi_result:
            return "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç Phi –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
        else:
            return "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"
    
    def _find_consensus(self, phi_result: str, claude_result: str) -> List[str]:
        """–ü–æ–∏—Å–∫ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ –º–µ–∂–¥—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
        if not phi_result or not claude_result:
            return []
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –æ–±—â–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        phi_words = set(phi_result.lower().split())
        claude_words = set(claude_result.lower().split())
        
        common_ui_terms = {
            "button", "menu", "form", "input", "text", "image", "icon", 
            "–∫–Ω–æ–ø–∫–∞", "–º–µ–Ω—é", "—Ñ–æ—Ä–º–∞", "—Ç–µ–∫—Å—Ç", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–∏–∫–æ–Ω–∫–∞"
        }
        
        consensus = list((phi_words & claude_words) & common_ui_terms)
        return consensus[:5]  # –¢–æ–ø 5 –æ–±—â–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
    
    def _calculate_confidence(self, results: Dict) -> float:
        """–†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö"""
        method = results.get("method_used", "none")
        
        if method == "hybrid":
            return 0.95
        elif method in ["claude_only", "fallback_to_claude"]:
            return 0.90
        elif method == "phi_only":
            return 0.75
        else:
            return 0.30
    
    async def batch_ui_analysis(self, image_paths: List[str], use_smart_filtering: bool = True) -> List[Dict]:
        """–ú–∞—Å—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ UI —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤"""
        results = []
        
        for i, image_path in enumerate(image_paths):
            logging.info(f"üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {i+1}/{len(image_paths)}: {Path(image_path).name}")
            
            try:
                if use_smart_filtering:
                    # –£–º–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: —Å–Ω–∞—á–∞–ª–∞ –±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑
                    result = await self.smart_ui_analysis(image_path, "fallback")
                else:
                    # –ü–æ–ª–Ω—ã–π –≥–∏–±—Ä–∏–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –≤—Å–µ—Ö
                    result = await self.smart_ui_analysis(image_path, "hybrid")
                
                results.append(result)
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {image_path}: {str(e)}")
                results.append({
                    "image_path": str(image_path),
                    "error": str(e),
                    "timestamp": datetime.now().isoformat()
                })
        
        return results
    
    def save_analysis_results(self, results: Union[Dict, List[Dict]], output_dir: str = "analysis_results"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        output_path = Path(output_dir)
        output_path.mkdir(parents=True, exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        if isinstance(results, dict):
            # –û–¥–∏–Ω–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            filename = f"ui_analysis_{timestamp}.json"
        else:
            # –ú–∞—Å—Å–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            filename = f"batch_ui_analysis_{timestamp}.json"
        
        filepath = output_path / filename
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        
        logging.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filepath}")
        return filepath
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.phi_agent:
            self.phi_agent.cleanup()
        logging.info("üßπ –ì–∏–±—Ä–∏–¥–Ω—ã–π –∞–≥–µ–Ω—Ç –æ—á–∏—â–µ–Ω")
