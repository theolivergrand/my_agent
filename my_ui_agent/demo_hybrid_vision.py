#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–∏–±—Ä–∏–¥–Ω—ã–º AI Vision –∞–≥–µ–Ω—Ç–æ–º
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.append(str(Path(__file__).parent))

async def demo_hybrid_vision():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ AI Vision –∞–≥–µ–Ω—Ç–∞"""
    
    print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ì–ò–ë–†–ò–î–ù–û–ì–û AI VISION –ê–ì–ï–ù–¢–ê")
    print("=" * 50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        from enhanced_agent import EnhancedUIAnalysisAgent
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
        print("ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ Enhanced UI Analysis Agent...")
        agent = EnhancedUIAnalysisAgent(
            anthropic_api_key=None,  # –ë—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω –∏–∑ .env
            enable_hybrid=True
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        capabilities = agent.get_analysis_capabilities()
        print("üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
        for service, available in capabilities.items():
            status = "‚úÖ –î–û–°–¢–£–ü–ï–ù" if available else "‚ùå –ù–ï–î–û–°–¢–£–ü–ï–ù"
            print(f"  ‚Ä¢ {service}: {status}")
        
        # –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        print("\nüîç –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
        
        # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        image_paths = []
        search_locations = [
            "uploads/*.png",
            "learning_data/*/*.png", 
            "*.png",
            "*.jpg"
        ]
        
        for pattern in search_locations:
            found = list(Path(".").glob(pattern))
            image_paths.extend(found)
        
        if not image_paths:
            print("‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            try:
                import matplotlib.pyplot as plt
                import matplotlib.patches as patches
                
                fig, ax = plt.subplots(1, 1, figsize=(8, 6))
                ax.set_xlim(0, 100)
                ax.set_ylim(0, 100)
                
                # –†–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç–æ–π UI
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                header = patches.Rectangle((10, 80), 80, 15, linewidth=2, 
                                         edgecolor='blue', facecolor='lightblue')
                ax.add_patch(header)
                ax.text(50, 87, 'UI Header', ha='center', va='center', fontsize=12, weight='bold')
                
                # –ö–Ω–æ–ø–∫–∏
                btn1 = patches.Rectangle((10, 50), 25, 15, linewidth=2, 
                                       edgecolor='green', facecolor='lightgreen')
                ax.add_patch(btn1)
                ax.text(22.5, 57, 'Button 1', ha='center', va='center', fontsize=10)
                
                btn2 = patches.Rectangle((40, 50), 25, 15, linewidth=2, 
                                       edgecolor='red', facecolor='lightcoral')
                ax.add_patch(btn2)
                ax.text(52.5, 57, 'Button 2', ha='center', va='center', fontsize=10)
                
                # –ü–æ–ª–µ –≤–≤–æ–¥–∞
                input_field = patches.Rectangle((10, 20), 60, 15, linewidth=2, 
                                              edgecolor='gray', facecolor='white')
                ax.add_patch(input_field)
                ax.text(40, 27, 'Text Input Field', ha='center', va='center', fontsize=10)
                
                ax.set_title('Test UI Screenshot', fontsize=14, weight='bold')
                ax.set_xticks([])
                ax.set_yticks([])
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                test_image_path = Path("demo_test_ui.png")
                plt.savefig(test_image_path, dpi=150, bbox_inches='tight')
                plt.close()
                
                image_paths = [test_image_path]
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {test_image_path}")
                
            except ImportError:
                print("‚ùå Matplotlib –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                print("üí° –ü–æ–º–µ—Å—Ç–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é 'uploads/' –∏–ª–∏ —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É")
                return
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        demo_image = image_paths[0]
        print(f"üñºÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {demo_image}")
        
        # –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        print(f"\nüîÑ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è '{demo_image.name}'...")
        
        try:
            result = await agent.analyze_screenshot_enhanced(
                str(demo_image),
                analysis_method="auto"
            )
            
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            print(f"üìä Confidence Score: {result.get('confidence_score', 0):.2f}")
            print(f"üõ†Ô∏è –ú–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {result.get('analysis_method', 'unknown')}")
            
            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º
            if 'google_vision' in result:
                gv = result['google_vision']
                stats = gv.get('statistics', {})
                print(f"üîç Google Vision: {stats.get('objects_count', 0)} –æ–±—ä–µ–∫—Ç–æ–≤, {stats.get('texts_count', 0)} —Ç–µ–∫—Å—Ç–æ–≤")
            
            if 'hybrid_vision' in result:
                hv = result['hybrid_vision']
                method = hv.get('method_used', 'unknown')
                confidence = hv.get('confidence_score', 0)
                print(f"ü§ñ Hybrid Vision: {method}, confidence {confidence:.2f}")
                
                # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
                if 'phi_analysis' in hv:
                    phi_result = hv['phi_analysis']
                    print(f"‚ö° Phi Vision: {phi_result[:100]}...")
                
                if 'claude_analysis' in hv:
                    claude_result = hv['claude_analysis']
                    print(f"üß† Claude Vision: {claude_result[:100]}...")
            
            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            if 'combined_analysis' in result:
                combined = result['combined_analysis']
                print(f"\nüìã –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑:")
                summary = combined.get('summary', {})
                for key, value in summary.items():
                    print(f"  ‚Ä¢ {key}: {value}")
                
                recommendations = combined.get('recommendations', [])
                if recommendations:
                    print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                    for rec in recommendations:
                        print(f"  ‚Ä¢ {rec}")
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
            print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("  ‚Ä¢ API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")
            print("  ‚Ä¢ –°–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            print("  ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
        if len(image_paths) > 1:
            print(f"\nüìÅ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ ({len(image_paths)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)...")
            
            try:
                batch_results = await agent.batch_analyze_screenshots(
                    str(Path(image_paths[0]).parent),
                    pattern="*.png",
                    max_files=3,
                    analysis_method="auto"
                )
                
                successful = len([r for r in batch_results if "error" not in r])
                print(f"‚úÖ –ú–∞—Å—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑: {successful}/{len(batch_results)} —É—Å–ø–µ—à–Ω–æ")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        
        # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        print(f"\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        agent.cleanup()
        
        print(f"\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ learning_data/enhanced/")
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: python setup_ai_vision.py")
    
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

def print_usage_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏"""
    print("\n" + "=" * 60)
    print("üìñ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ò")
    print("=" * 60)
    print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ AI Vision –∞–≥–µ–Ω—Ç–∞.")
    print("\n–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:")
    print("1. ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
    print("2. ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω .env —Ñ–∞–π–ª —Å API –∫–ª—é—á–∞–º–∏")
    print("3. ‚úÖ –ï—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    print("\n–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print("‚Ä¢ python setup_ai_vision.py - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
    print("‚Ä¢ python test_ai_vision_setup.py - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã")
    print("‚Ä¢ python demo_hybrid_vision.py - —ç—Ç–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
    print("=" * 60)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        await demo_hybrid_vision()
    except KeyboardInterrupt:
        print("\n‚ùå –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        print_usage_info()

if __name__ == "__main__":
    asyncio.run(main())
