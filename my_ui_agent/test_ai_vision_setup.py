#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö AI Vision —Å–µ—Ä–≤–∏—Å–æ–≤
"""

import asyncio
import os
import sys
from pathlib import Path
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.append(str(Path(__file__).parent))

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
try:
    from ai_vision_config import AIVisionConfig
    from enhanced_agent import EnhancedUIAnalysisAgent
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    sys.exit(1)

class AIVisionTester:
    """–¢–µ—Å—Ç–µ—Ä –≤—Å–µ—Ö AI Vision —Å–µ—Ä–≤–∏—Å–æ–≤"""
    
    def __init__(self):
        self.config = AIVisionConfig()
        self.results = {
            "timestamp": datetime.now().isoformat(),
            "tests": [],
            "summary": {}
        }
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í AI VISION –°–ï–†–í–ò–°–û–í")
        print("=" * 50)
        
        # 1. –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        await self.test_configuration()
        
        # 2. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
        await self.test_agent_creation()
        
        # 3. –¢–µ—Å—Ç —Å —Ç–µ—Å—Ç–æ–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        await self.test_image_analysis()
        
        # 4. –¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        await self.test_batch_analysis()
        
        # 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.save_test_results()
        
        # 6. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.print_final_report()
    
    async def test_configuration(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("üîß –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        test_result = {
            "test_name": "configuration",
            "status": "success",
            "details": {
                "google_vision": self.config.google_vision_available,
                "claude_vision": self.config.claude_available,
                "phi_vision": self.config.phi_available
            },
            "message": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞"
        }
        
        available_services = sum([
            self.config.google_vision_available,
            self.config.claude_available,
            self.config.phi_available
        ])
        
        if available_services == 0:
            test_result["status"] = "failed"
            test_result["message"] = "–ù–∏ –æ–¥–∏–Ω —Å–µ—Ä–≤–∏—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
        elif available_services == 1:
            test_result["status"] = "warning"
            test_result["message"] = "–î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–µ—Ä–≤–∏—Å"
        
        self.results["tests"].append(test_result)
        print(f"  {'‚úÖ' if test_result['status'] == 'success' else '‚ö†Ô∏è' if test_result['status'] == 'warning' else '‚ùå'} {test_result['message']}")
    
    async def test_agent_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞"""
        print("ü§ñ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –¥–ª—è Claude
            anthropic_api_key = os.getenv('ANTHROPIC_API_KEY')
            if anthropic_api_key == 'your_anthropic_api_key_here':
                anthropic_api_key = None
            
            # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
            agent = EnhancedUIAnalysisAgent(
                anthropic_api_key=anthropic_api_key,
                enable_hybrid=True
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            capabilities = agent.get_analysis_capabilities()
            
            test_result = {
                "test_name": "agent_creation",
                "status": "success",
                "details": capabilities,
                "message": f"–ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å {sum(capabilities.values())} –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏"
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≥–µ–Ω—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
            self.agent = agent
            
        except Exception as e:
            test_result = {
                "test_name": "agent_creation",
                "status": "failed",
                "details": {"error": str(e)},
                "message": f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞: {str(e)}"
            }
            self.agent = None
        
        self.results["tests"].append(test_result)
        print(f"  {'‚úÖ' if test_result['status'] == 'success' else '‚ùå'} {test_result['message']}")
    
    async def test_image_analysis(self):
        """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        print("üñºÔ∏è –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        
        if not self.agent:
            test_result = {
                "test_name": "image_analysis",
                "status": "skipped",
                "details": {},
                "message": "–ê–≥–µ–Ω—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω, —Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω"
            }
        else:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ
            test_image_path = self.create_test_image()
            
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
                analysis_result = await self.agent.analyze_screenshot_enhanced(
                    test_image_path, 
                    analysis_method="auto"
                )
                
                test_result = {
                    "test_name": "image_analysis",
                    "status": "success",
                    "details": {
                        "confidence_score": analysis_result.get("confidence_score", 0),
                        "methods_used": analysis_result.get("analysis_method", "unknown"),
                        "services_available": len(analysis_result.get("capabilities", {}))
                    },
                    "message": f"–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω, confidence: {analysis_result.get('confidence_score', 0):.2f}"
                }
                
            except Exception as e:
                test_result = {
                    "test_name": "image_analysis",
                    "status": "failed",
                    "details": {"error": str(e)},
                    "message": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"
                }
        
        self.results["tests"].append(test_result)
        print(f"  {'‚úÖ' if test_result['status'] == 'success' else '‚ùå' if test_result['status'] == 'failed' else '‚è≠Ô∏è'} {test_result['message']}")
    
    def create_test_image(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        possible_paths = [
            "uploads/f3afbec86c89421f88469ece197e8384_Screenshot_2025-01-27_170812.png",
            "learning_data/entry_20250614-022417/Screenshot 2025-01-27 170812.png",
            "test_image.png"
        ]
        
        for path in possible_paths:
            if Path(path).exists():
                return path
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        try:
            from PIL import Image, ImageDraw, ImageFont
            
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 400x300
            img = Image.new('RGB', (400, 300), color='white')
            draw = ImageDraw.Draw(img)
            
            # –†–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç–æ–π UI
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            draw.rectangle([10, 10, 390, 50], fill='blue')
            draw.text((20, 20), "Test UI Header", fill='white')
            
            # –ö–Ω–æ–ø–∫–∏
            draw.rectangle([10, 70, 120, 110], fill='green')
            draw.text((30, 85), "Button 1", fill='white')
            
            draw.rectangle([140, 70, 250, 110], fill='red')
            draw.text((165, 85), "Button 2", fill='white')
            
            # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
            draw.rectangle([10, 130, 390, 170], fill='lightgray', outline='black')
            draw.text((20, 145), "Text Input Field", fill='black')
            
            # –ú–µ–Ω—é
            draw.rectangle([10, 190, 390, 290], fill='lightblue', outline='navy')
            draw.text((20, 210), "Menu Item 1", fill='navy')
            draw.text((20, 230), "Menu Item 2", fill='navy')
            draw.text((20, 250), "Menu Item 3", fill='navy')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            test_path = "test_ui_image.png"
            img.save(test_path)
            print(f"  üì∏ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {test_path}")
            return test_path
            
        except Exception as e:
            print(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
            return None
    
    async def test_batch_analysis(self):
        """–¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        print("üìÅ –¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
        
        if not self.agent:
            test_result = {
                "test_name": "batch_analysis",
                "status": "skipped",
                "details": {},
                "message": "–ê–≥–µ–Ω—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω, —Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω"
            }
        else:
            # –ò—â–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            test_directories = ["uploads", "learning_data", "."]
            images_found = []
            
            for directory in test_directories:
                if Path(directory).exists():
                    for ext in ["*.png", "*.jpg", "*.jpeg"]:
                        images_found.extend(list(Path(directory).glob(ext)))
            
            if not images_found:
                test_result = {
                    "test_name": "batch_analysis",
                    "status": "skipped",
                    "details": {},
                    "message": "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                }
            else:
                try:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
                    test_images = images_found[:2]
                    
                    batch_results = await self.agent.batch_analyze_screenshots(
                        str(test_images[0].parent),
                        pattern=test_images[0].name,
                        max_files=2,
                        analysis_method="auto"
                    )
                    
                    test_result = {
                        "test_name": "batch_analysis",
                        "status": "success",
                        "details": {
                            "images_processed": len(batch_results),
                            "successful_analyses": len([r for r in batch_results if "error" not in r])
                        },
                        "message": f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(batch_results)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
                    }
                    
                except Exception as e:
                    test_result = {
                        "test_name": "batch_analysis",
                        "status": "failed",
                        "details": {"error": str(e)},
                        "message": f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"
                    }
        
        self.results["tests"].append(test_result)
        print(f"  {'‚úÖ' if test_result['status'] == 'success' else '‚ùå' if test_result['status'] == 'failed' else '‚è≠Ô∏è'} {test_result['message']}")
    
    def save_test_results(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_tests = len(self.results["tests"])
        successful = len([t for t in self.results["tests"] if t["status"] == "success"])
        failed = len([t for t in self.results["tests"] if t["status"] == "failed"])
        skipped = len([t for t in self.results["tests"] if t["status"] == "skipped"])
        warnings = len([t for t in self.results["tests"] if t["status"] == "warning"])
        
        self.results["summary"] = {
            "total_tests": total_tests,
            "successful": successful,
            "failed": failed,
            "skipped": skipped,
            "warnings": warnings,
            "success_rate": successful / total_tests if total_tests > 0 else 0
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
        results_dir = Path("test_results")
        results_dir.mkdir(exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        results_file = results_dir / f"ai_vision_test_{timestamp}.json"
        
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {results_file}")
    
    def print_final_report(self):
        """–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
        summary = self.results["summary"]
        
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø AI VISION")
        print("=" * 60)
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {summary['total_tests']}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {summary['successful']}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {summary['failed']}")
        print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {summary['skipped']}")
        print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {summary['warnings']}")
        print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {summary['success_rate']:.1%}")
        
        print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        
        if summary['success_rate'] >= 0.75:
            print("  ‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
            print("  ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ enhanced_agent.py –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ UI")
            print("  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ web_app.py –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
        elif summary['success_rate'] >= 0.5:
            print("  ‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã")
            print("  ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ API –∫–ª—é—á–∏")
            print("  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ failed —Ç–µ—Å—Ç—ã –≤—ã—à–µ")
        else:
            print("  ‚ùå –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            print("  ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ setup_ai_vision.py")
            print("  ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ .env —Ñ–∞–π–ª —Å API –∫–ª—é—á–∞–º–∏")
        
        print("=" * 60)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        tester = AIVisionTester()
        await tester.run_all_tests()
    except KeyboardInterrupt:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

if __name__ == "__main__":
    asyncio.run(main())
