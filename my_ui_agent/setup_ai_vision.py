#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π AI Vision —Å–µ—Ä–≤–∏—Å–æ–≤
"""

import subprocess
import sys
import os
from pathlib import Path
import json

class AIVisionSetup:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ AI Vision —Å–µ—Ä–≤–∏—Å–æ–≤"""
    
    def __init__(self):
        self.errors = []
        self.warnings = []
        self.success = []
    
    def run_setup(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ AI Vision —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞")
        print("=" * 50)
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.check_python_environment()
        
        # 2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        self.install_dependencies()
        
        # 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GPU (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        self.setup_gpu_support()
        
        # 4. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        self.create_config_files()
        
        # 5. –¢–µ—Å—Ç –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        self.test_services()
        
        # 6. –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.print_summary()
    
    def check_python_environment(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Python –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        # –í–µ—Ä—Å–∏—è Python
        python_version = sys.version_info
        if python_version.major == 3 and python_version.minor >= 8:
            self.success.append(f"Python {python_version.major}.{python_version.minor} ‚úÖ")
        else:
            self.errors.append(f"–¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+, –Ω–∞–π–¥–µ–Ω {python_version.major}.{python_version.minor}")
        
        # Pip
        try:
            import pip
            self.success.append("pip –¥–æ—Å—Ç—É–ø–µ–Ω ‚úÖ")
        except ImportError:
            self.errors.append("pip –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def install_dependencies(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        # –ë–∞–∑–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        base_packages = [
            "torch",
            "transformers",
            "anthropic",
            "pillow",
            "numpy",
            "requests",
            "python-dotenv"
        ]
        
        # Google Cloud –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        google_packages = [
            "google-cloud-vision",
            "google-auth-oauthlib"
        ]
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
        self._install_packages(base_packages, "–ë–∞–∑–æ–≤—ã–µ AI –ø–∞–∫–µ—Ç—ã")
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Google Cloud –ø–∞–∫–µ—Ç–æ–≤
        self._install_packages(google_packages, "Google Cloud –ø–∞–∫–µ—Ç—ã")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ PyTorch –¥–ª—è GPU (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        self._install_pytorch()
    
    def _install_packages(self, packages, description):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤"""
        print(f"  üì• {description}...")
        
        for package in packages:
            try:
                subprocess.check_call([
                    sys.executable, "-m", "pip", "install", package, "--upgrade"
                ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                self.success.append(f"{package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚úÖ")
            except subprocess.CalledProcessError:
                self.warnings.append(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {package}")
    
    def _install_pytorch(self):
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ PyTorch"""
        print("  üî• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PyTorch...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è CUDA
            import torch
            if torch.cuda.is_available():
                print("    üéÆ CUDA –¥–æ—Å—Ç—É–ø–Ω–∞, PyTorch —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                self.success.append("PyTorch —Å CUDA ‚úÖ")
            else:
                print("    üíª –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU –≤–µ—Ä—Å–∏—è PyTorch")
                self.success.append("PyTorch CPU ‚úÖ")
        except ImportError:
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PyTorch
            try:
                subprocess.check_call([
                    sys.executable, "-m", "pip", "install", 
                    "torch", "torchvision", "torchaudio", "--index-url", 
                    "https://download.pytorch.org/whl/cpu"
                ])
                self.success.append("PyTorch —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚úÖ")
            except subprocess.CalledProcessError:
                self.errors.append("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PyTorch")
    
    def setup_gpu_support(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ GPU –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        print("üéÆ –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU –ø–æ–¥–¥–µ—Ä–∂–∫–∏...")
        
        try:
            import torch
            if torch.cuda.is_available():
                gpu_count = torch.cuda.device_count()
                gpu_name = torch.cuda.get_device_name(0)
                self.success.append(f"GPU: {gpu_name} ({gpu_count} —É—Å—Ç—Ä–æ–π—Å—Ç–≤) ‚úÖ")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏ GPU
                memory_gb = torch.cuda.get_device_properties(0).total_memory / (1024**3)
                if memory_gb >= 6:
                    self.success.append(f"GPU –ø–∞–º—è—Ç—å: {memory_gb:.1f}GB (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è Phi-3.5) ‚úÖ")
                else:
                    self.warnings.append(f"GPU –ø–∞–º—è—Ç—å: {memory_gb:.1f}GB (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)")
            else:
                self.warnings.append("GPU –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è CPU")
        except ImportError:
            self.warnings.append("PyTorch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, GPU –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
    
    def create_config_files(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        print("üìù –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
        env_path = Path(".env")
        if not env_path.exists():
            env_content = """# AI Vision Configuration
# Anthropic API Key - –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞: https://console.anthropic.com/
ANTHROPIC_API_KEY=your_anthropic_api_key_here

# Google Cloud Credentials - –ø—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É
# –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞: https://console.cloud.google.com/
GOOGLE_APPLICATION_CREDENTIALS=/path/to/your/google-credentials.json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏
PHI_MODEL_NAME=microsoft/Phi-3.5-vision-instruct
CLAUDE_MODEL_NAME=claude-3-5-sonnet-20241022
MAX_TOKENS=1000
TEMPERATURE=0.7
BATCH_SIZE=5
"""
            with open(env_path, 'w') as f:
                f.write(env_content)
            self.success.append(".env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω ‚úÖ")
        else:
            self.warnings.append(".env —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
        dirs_to_create = [
            "learning_data/enhanced",
            "learning_data/batch_analysis", 
            "analysis_results",
            "logs"
        ]
        
        for dir_path in dirs_to_create:
            Path(dir_path).mkdir(parents=True, exist_ok=True)
            self.success.append(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_path} —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ")
    
    def test_services(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI Vision —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        # –¢–µ—Å—Ç Phi Vision
        self._test_phi_vision()
        
        # –¢–µ—Å—Ç Claude Vision
        self._test_claude_vision()
        
        # –¢–µ—Å—Ç Google Vision
        self._test_google_vision()
    
    def _test_phi_vision(self):
        """–¢–µ—Å—Ç Phi Vision"""
        try:
            import torch
            from transformers import AutoModelForCausalLM, AutoProcessor
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ (–±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏)
            model_name = "microsoft/Phi-3.5-vision-instruct"
            processor = AutoProcessor.from_pretrained(model_name, trust_remote_code=True)
            self.success.append("Phi Vision: –º–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ ‚úÖ")
            
        except ImportError:
            self.warnings.append("Phi Vision: –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            self.warnings.append(f"Phi Vision: –æ—à–∏–±–∫–∞ - {str(e)[:50]}...")
    
    def _test_claude_vision(self):
        """–¢–µ—Å—Ç Claude Vision"""
        try:
            import anthropic
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–∞
            api_key = os.getenv('ANTHROPIC_API_KEY')
            if api_key and api_key != 'your_anthropic_api_key_here':
                client = anthropic.Anthropic(api_key=api_key)
                self.success.append("Claude Vision: API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω ‚úÖ")
            else:
                self.warnings.append("Claude Vision: –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å ANTHROPIC_API_KEY –≤ .env")
                
        except ImportError:
            self.warnings.append("Claude Vision: –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ anthropic –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            self.warnings.append(f"Claude Vision: –æ—à–∏–±–∫–∞ - {str(e)[:50]}...")
    
    def _test_google_vision(self):
        """–¢–µ—Å—Ç Google Vision"""
        try:
            from google.cloud import vision
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è credentials
            credentials_path = os.getenv('GOOGLE_APPLICATION_CREDENTIALS')
            if credentials_path and Path(credentials_path).exists():
                client = vision.ImageAnnotatorClient()
                self.success.append("Google Vision: credentials –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã ‚úÖ")
            else:
                self.warnings.append("Google Vision: –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å GOOGLE_APPLICATION_CREDENTIALS")
                
        except ImportError:
            self.warnings.append("Google Vision: –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ google-cloud-vision –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            self.warnings.append(f"Google Vision: –æ—à–∏–±–∫–∞ - {str(e)[:50]}...")
    
    def print_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ù–ê–°–¢–†–û–ô–ö–ò AI VISION")
        print("=" * 60)
        
        if self.success:
            print(f"\n‚úÖ –£–°–ü–ï–®–ù–û ({len(self.success)}):")
            for item in self.success:
                print(f"  ‚Ä¢ {item}")
        
        if self.warnings:
            print(f"\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø ({len(self.warnings)}):")
            for item in self.warnings:
                print(f"  ‚Ä¢ {item}")
        
        if self.errors:
            print(f"\n‚ùå –û–®–ò–ë–ö–ò ({len(self.errors)}):")
            for item in self.errors:
                print(f"  ‚Ä¢ {item}")
        
        print("\n" + "=" * 60)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("üéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        
        if not self.errors:
            print("  1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª–µ")
            print("  2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç: python test_ai_vision_setup.py")
            print("  3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ enhanced_agent.py –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        else:
            print("  1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ")
            print("  2. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É")
        
        print("=" * 60)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        setup = AIVisionSetup()
        setup.run_setup()
    except KeyboardInterrupt:
        print("\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    main()
