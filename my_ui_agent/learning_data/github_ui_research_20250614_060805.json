{
  "timestamp": "2025-06-14T06:08:05.124893",
  "total_repositories": 11,
  "repositories": [
    {
      "id": 310837775,
      "name": "neurons",
      "full_name": "Aryia-Behroziuan/neurons",
      "description": "An ANN is a model based on a collection of connected units or nodes called \"artificial neurons\", which loosely model the neurons in a biological brain. Each connection, like the synapses in a biological brain, can transmit information, a \"signal\", from one artificial neuron to another. An artificial neuron that receives a signal can process it and then signal additional artificial neurons connected to it. In common ANN implementations, the signal at a connection between artificial neurons is a real number, and the output of each artificial neuron is computed by some non-linear function of the sum of its inputs. The connections between artificial neurons are called \"edges\". Artificial neurons and edges typically have a weight that adjusts as learning proceeds. The weight increases or decreases the strength of the signal at a connection. Artificial neurons may have a threshold such that the signal is only sent if the aggregate signal crosses that threshold. Typically, artificial neurons are aggregated into layers. Different layers may perform different kinds of transformations on their inputs. Signals travel from the first layer (the input layer) to the last layer (the output layer), possibly after traversing the layers multiple times.  The original goal of the ANN approach was to solve problems in the same way that a human brain would. However, over time, attention moved to performing specific tasks, leading to deviations from biology. Artificial neural networks have been used on a variety of tasks, including computer vision, speech recognition, machine translation, social network filtering, playing board and video games and medical diagnosis.  Deep learning consists of multiple hidden layers in an artificial neural network. This approach tries to model the way the human brain processes light and sound into vision and hearing. Some successful applications of deep learning are computer vision and speech recognition.[68]  Decision trees Main article: Decision tree learning Decision tree learning uses a decision tree as a predictive model to go from observations about an item (represented in the branches) to conclusions about the item's target value (represented in the leaves). It is one of the predictive modeling approaches used in statistics, data mining, and machine learning. Tree models where the target variable can take a discrete set of values are called classification trees; in these tree structures, leaves represent class labels and branches represent conjunctions of features that lead to those class labels. Decision trees where the target variable can take continuous values (typically real numbers) are called regression trees. In decision analysis, a decision tree can be used to visually and explicitly represent decisions and decision making. In data mining, a decision tree describes data, but the resulting classification tree can be an input for decision making.  Support vector machines Main article: Support vector machines Support vector machines (SVMs), also known as support vector networks, are a set of related supervised learning methods used for classification and regression. Given a set of training examples, each marked as belonging to one of two categories, an SVM training algorithm builds a model that predicts whether a new example falls into one category or the other.[69] An SVM training algorithm is a non-probabilistic, binary, linear classifier, although methods such as Platt scaling exist to use SVM in a probabilistic classification setting. In addition to performing linear classification, SVMs can efficiently perform a non-linear classification using what is called the kernel trick, implicitly mapping their inputs into high-dimensional feature spaces.   Illustration of linear regression on a data set. Regression analysis Main article: Regression analysis Regression analysis encompasses a large variety of statistical methods to estimate the relationship between input variables and their associated features. Its most common form is linear regression, where a single line is drawn to best fit the given data according to a mathematical criterion such as ordinary least squares. The latter is often extended by regularization (mathematics) methods to mitigate overfitting and bias, as in ridge regression. When dealing with non-linear problems, go-to models include polynomial regression (for example, used for trendline fitting in Microsoft Excel[70]), logistic regression (often used in statistical classification) or even kernel regression, which introduces non-linearity by taking advantage of the kernel trick to implicitly map input variables to higher-dimensional space.  Bayesian networks Main article: Bayesian network  A simple Bayesian network. Rain influences whether the sprinkler is activated, and both rain and the sprinkler influence whether the grass is wet. A Bayesian network, belief network, or directed acyclic graphical model is a probabilistic graphical model that represents a set of random variables and their conditional independence with a directed acyclic graph (DAG). For example, a Bayesian network could represent the probabilistic relationships between diseases and symptoms. Given symptoms, the network can be used to compute the probabilities of the presence of various diseases. Efficient algorithms exist that perform inference and learning. Bayesian networks that model sequences of variables, like speech signals or protein sequences, are called dynamic Bayesian networks. Generalizations of Bayesian networks that can represent and solve decision problems under uncertainty are called influence diagrams.  Genetic algorithms Main article: Genetic algorithm A genetic algorithm (GA) is a search algorithm and heuristic technique that mimics the process of natural selection, using methods such as mutation and crossover to generate new genotypes in the hope of finding good solutions to a given problem. In machine learning, genetic algorithms were used in the 1980s and 1990s.[71][72] Conversely, machine learning techniques have been used to improve the performance of genetic and evolutionary algorithms.[73]  Training models Usually, machine learning models require a lot of data in order for them to perform well. Usually, when training a machine learning model, one needs to collect a large, representative sample of data from a training set. Data from the training set can be as varied as a corpus of text, a collection of images, and data collected from individual users of a service. Overfitting is something to watch out for when training a machine learning model.  Federated learning Main article: Federated learning Federated learning is an adapted form of distributed artificial intelligence to training machine learning models that decentralizes the training process, allowing for users' privacy to be maintained by not needing to send their data to a centralized server. This also increases efficiency by decentralizing the training process to many devices. For example, Gboard uses federated machine learning to train search query prediction models on users' mobile phones without having to send individual searches back to Google.[74]  Applications There are many applications for machine learning, including:  Agriculture Anatomy Adaptive websites Affective computing Banking Bioinformatics Brain–machine interfaces Cheminformatics Citizen science Computer networks Computer vision Credit-card fraud detection Data quality DNA sequence classification Economics Financial market analysis[75] General game playing Handwriting recognition Information retrieval Insurance Internet fraud detection Linguistics Machine learning control Machine perception Machine translation Marketing Medical diagnosis Natural language processing Natural language understanding Online advertising Optimization Recommender systems Robot locomotion Search engines Sentiment analysis Sequence mining Software engineering Speech recognition Structural health monitoring Syntactic pattern recognition Telecommunication Theorem proving Time series forecasting User behavior analytics In 2006, the media-services provider Netflix held the first \"Netflix Prize\" competition to find a program to better predict user preferences and improve the accuracy of its existing Cinematch movie recommendation algorithm by at least 10%. A joint team made up of researchers from AT&T Labs-Research in collaboration with the teams Big Chaos and Pragmatic Theory built an ensemble model to win the Grand Prize in 2009 for $1 million.[76] Shortly after the prize was awarded, Netflix realized that viewers' ratings were not the best indicators of their viewing patterns (\"everything is a recommendation\") and they changed their recommendation engine accordingly.[77] In 2010 The Wall Street Journal wrote about the firm Rebellion Research and their use of machine learning to predict the financial crisis.[78] In 2012, co-founder of Sun Microsystems, Vinod Khosla, predicted that 80% of medical doctors' jobs would be lost in the next two decades to automated machine learning medical diagnostic software.[79] In 2014, it was reported that a machine learning algorithm had been applied in the field of art history to study fine art paintings and that it may have revealed previously unrecognized influences among artists.[80] In 2019 Springer Nature published the first research book created using machine learning.[81]  Limitations Although machine learning has been transformative in some fields, machine-learning programs often fail to deliver expected results.[82][83][84] Reasons for this are numerous: lack of (suitable) data, lack of access to the data, data bias, privacy problems, badly chosen tasks and algorithms, wrong tools and people, lack of resources, and evaluation problems.[85]  In 2018, a self-driving car from Uber failed to detect a pedestrian, who was killed after a collision.[86] Attempts to use machine learning in healthcare with the IBM Watson system failed to deliver even after years of time and billions of dollars invested.[87][88]  Bias Main article: Algorithmic bias Machine learning approaches in particular can suffer from different data biases. A machine learning system trained on current customers only may not be able to predict the needs of new customer groups that are not represented in the training data. When trained on man-made data, machine learning is likely to pick up the same constitutional and unconscious biases already present in society.[89] Language models learned from data have been shown to contain human-like biases.[90][91] Machine learning systems used for criminal risk assessment have been found to be biased against black people.[92][93] In 2015, Google photos would often tag black people as gorillas,[94] and in 2018 this still was not well resolved, but Google reportedly was still using the workaround to remove all gorillas from the training data, and thus was not able to recognize real gorillas at all.[95] Similar issues with recognizing non-white people have been found in many other systems.[96] In 2016, Microsoft tested a chatbot that learned from Twitter, and it quickly picked up racist and sexist language.[97] Because of such challenges, the effective use of machine learning may take longer to be adopted in other domains.[98] Concern for fairness in machine learning, that is, reducing bias in machine learning and propelling its use for human good is increasingly expressed by artificial intelligence scientists, including Fei-Fei Li, who reminds engineers that \"There’s nothing artificial about AI...It’s inspired by people, it’s created by people, and—most importantly—it impacts people. It is a powerful tool we are only just beginning to understand, and that is a profound responsibility.”[99]  Model assessments Classification of machine learning models can be validated by accuracy estimation techniques like the holdout method, which splits the data in a training and test set (conventionally 2/3 training set and 1/3 test set designation) and evaluates the performance of the training model on the test set. In comparison, the K-fold-cross-validation method randomly partitions the data into K subsets and then K experiments are performed each respectively considering 1 subset for evaluation and the remaining K-1 subsets for training the model. In addition to the holdout and cross-validation methods, bootstrap, which samples n instances with replacement from the dataset, can be used to assess model accuracy.[100]  In addition to overall accuracy, investigators frequently report sensitivity and specificity meaning True Positive Rate (TPR) and True Negative Rate (TNR) respectively. Similarly, investigators sometimes report the false positive rate (FPR) as well as the false negative rate (FNR). However, these rates are ratios that fail to reveal their numerators and denominators. The total operating characteristic (TOC) is an effective method to express a model's diagnostic ability. TOC shows the numerators and denominators of the previously mentioned rates, thus TOC provides more information than the commonly used receiver operating characteristic (ROC) and ROC's associated area under the curve (AUC).[101]  Ethics Machine learning poses a host of ethical questions. Systems which are trained on datasets collected with biases may exhibit these biases upon use (algorithmic bias), thus digitizing cultural prejudices.[102] For example, using job hiring data from a firm with racist hiring policies may lead to a machine learning system duplicating the bias by scoring job applicants against similarity to previous successful applicants.[103][104] Responsible collection of data and documentation of algorithmic rules used by a system thus is a critical part of machine learning.  Because human languages contain biases, machines trained on language corpora will necessarily also learn these biases.[105][106]  Other forms of ethical challenges, not related to personal biases, are more seen in health care. There are concerns among health care professionals that these systems might not be designed in the public's interest but as income-generating machines. This is especially true in the United States where there is a long-standing ethical dilemma of improving health care, but also increasing profits. For example, the algorithms could be designed to provide patients with unnecessary tests or medication in which the algorithm's proprietary owners hold stakes. There is huge potential for machine learning in health care to provide professionals a great tool to diagnose, medicate, and even plan recovery paths for patients, but this will not happen until the personal biases mentioned previously, and these \"greed\" biases are addressed.[107]  Hardware Since the 2010s, advances in both machine learning algorithms and computer hardware have led to more efficient methods for training deep neural networks (a particular narrow subdomain of machine learning) that contain many layers of non-linear hidden units.[108] By 2019, graphic processing units (GPUs), often with AI-specific enhancements, had displaced CPUs as the dominant method of training large-scale commercial cloud AI.[109] OpenAI estimated the hardware compute used in the largest deep learning projects from AlexNet (2012) to AlphaZero (2017), and found a 300,000-fold increase in the amount of compute required, with a doubling-time trendline of 3.4 months.[110][111]  Software Software suites containing a variety of machine learning algorithms include the following:  Free and open-source so",
      "html_url": "https://github.com/Aryia-Behroziuan/neurons",
      "stars": 70,
      "forks": 15,
      "language": null,
      "topics": [
        "an-ann",
        "android",
        "artificial-intelligence",
        "aryia-behroziuan",
        "bootstrap",
        "csharp",
        "deep-learning",
        "expressjs",
        "firebase",
        "neural-network",
        "wikipedia"
      ],
      "updated_at": "2025-06-11T17:27:26Z",
      "created_at": "2020-11-07T12:17:04Z",
      "relevance_score": 10,
      "size": 7,
      "total_score": 24.7
    },
    {
      "id": 148614392,
      "name": "Volume-Control-using-Hand-Gestures-Recognition",
      "full_name": "LeadingIndiaAI/Volume-Control-using-Hand-Gestures-Recognition",
      "description": "Gesture recognition helps computers to understand human body language. This helps to build a more potent link between humans and machines, rather than just the basic text user interfaces or graphical user interfaces (GUIs). In this project for gesture recognition, the human body's motions are read by computer camera. The computer then makes use of this data as input to handle applications. The objective of this project is to develop an interface which will capture human hand gesture dynamically and will control the volume level. For this, Deep Learning techniques such as Yolo model, Inception Net model+LSTM, 3-D CNN+LSTM and Time Distributed CNN+LSTM have been studied to compare the results of hand detection. The results of Yolo model outperform the other three models. The models were trained using Kaggle and 20% of the videos available in 20 billion jester dataset. After the hand detection in captured frames, the next step is to control the system volume depending on direction of hand movement. The hand movement direction is determined by generating and locating the bounding box on the detected hand.",
      "html_url": "https://github.com/LeadingIndiaAI/Volume-Control-using-Hand-Gestures-Recognition",
      "stars": 16,
      "forks": 4,
      "language": "Python",
      "topics": [],
      "updated_at": "2024-11-19T08:23:38Z",
      "created_at": "2018-09-13T09:25:20Z",
      "relevance_score": 10,
      "size": 596,
      "total_score": 24.16
    },
    {
      "id": 494339203,
      "name": "Implementation-of-Different-Deep-Learning-Algorithms-for-Fracture-Detection-Image-Classification",
      "full_name": "priyamittal15/Implementation-of-Different-Deep-Learning-Algorithms-for-Fracture-Detection-Image-Classification",
      "description": "Using-Deep-Learning-Techniques-perform-Fracture-Detection-Image-Processing Using Different Image Processing techniques Implementing Fracture Detection on X rays Images on 8000 + images of dataset  Description About Project:  Bones are the stiff organs that protect vital organs such as the brain, heart, lungs, and other internal organs in the human body. There are 206 bones in the human body, all of which has different shapes, sizes, and structures. The femur bones are the largest, and the auditory ossicles are the smallest. Humans suffer from bone fractures on a regular basis. Bone fractures can happen as a result of an accident or any other situation in which the bones are put under a lot of pressure. Oblique, complex, comminute, spiral, greenstick, and transverse bone fractures are among the many forms that can occur. X-ray, computed tomography (CT), magnetic resonance imaging (MRI), ultrasound, and other types of medical imaging techniques are available to detect various types of disorders. So we design the architecture of it using Neural Networks different models, compare the accuracy, and get a result of which model works better for our dataset and which model delivers correct results on a specific related dataset with 10 classes. Basically our main motive is to check that which model works better on our dataset so in future reference we all get an idea that which model gives better type of accuracy for a respective dataset .  Proposed Method for Project:  we decided to make this project because we have seen a lot of times that report that are generated by computer produce error sometimes so we wanted to find out which model gives good accuracy and produce less error so we start to research over image processing nd those libraries which are used in image processing like Keras , Matplot lib , Image Generator , tensor flow and other libraries and used some of them and implement it on different image processing algorithm like as CNN , VGG-16 Model ,ResNet50 Model , InceptionV3 Model . and then find the best model which gives best accuracy for that we generate classification report using predefined libraries in python such as precision , recall ,r2score , mean square error etc by importing Sklearn.  Methodology of Project:  Phase 1: Requirement analysis:  • Study concepts of Basic Python programming. • Study of Tensor flow, keras and Python API interface . • Study of basic algorithms of Image Processing and neural network And deep learning concepts. • Collect the dataset from different resources and describe it into Different classes(5 Fractured + 5 non fractured).  Phase 2: Designing and development:  The stages of design and development are further segmented. This step starts with data from the Requirement and Analysis phase, which will lead to the model construction phase, where a model will be created and an algorithm will be devised. After the algorithm design phase is completed, the focus will shift to algorithm analysis and implementation in this project.  Phase 3: Coding Phase:  Before real coding begins, the task is divided into modules/units and assigned to team members once the system design papers are received. Because code is developed during this phase, it is the developers' primary emphasis. The most time-consuming aspect of the project will be this. This project's implementation begins with the development of a program in the relevant programming language and the production of an error-free executable program.  Phase 4: Testing Phase:  When it comes to the testing phase, we may test our model based on the classification report it generates, which contains a variety of factors such as accuracy, f1score, precision, and recall, and we can also test our model based on its training and testing accuracy.  Phase 5: Deployment Phase:  One of our goals is to bring all of the previous steps together and put them into practice. Another goal is to deploy our model into a python-based interface application after comparing the classification reports and determining which model is best for our dataset.",
      "html_url": "https://github.com/priyamittal15/Implementation-of-Different-Deep-Learning-Algorithms-for-Fracture-Detection-Image-Classification",
      "stars": 13,
      "forks": 2,
      "language": null,
      "topics": [],
      "updated_at": "2025-05-23T06:51:53Z",
      "created_at": "2022-05-20T05:57:20Z",
      "relevance_score": 7,
      "size": 337,
      "total_score": 18.130000000000003
    },
    {
      "id": 515265971,
      "name": "Gesture_Spotter",
      "full_name": "CambridgeIIS/Gesture_Spotter",
      "description": "In this paper we examine the task of key gesture spotting: accurate and timely online recognition of hand gestures. We specifically seek to address two key challenges faced by developers when integrating key gesture spotting functionality into their applications. These are: i) achieving high accuracy and zero or negative activation lag with single-time activation; and ii) avoiding the requirement for deep domain expertise in machine learning. We address the first challenge by proposing a key gesture spotting architecture consisting of a novel gesture classifier model and a novel single-time activation algorithm. This key gesture spotting architecture was evaluated on four separate hand skeleton gesture datasets, and achieved high recognition accuracy with early detection. We address the second challenge by encapsulating different data processing and augmentation strategies, as well as the proposed key gesture spotting architecture, into a graphical user interface and an application programming interface. Two user studies demonstrate that developers are able to efficiently construct custom recognizers using both the graphical user interface and the application programming interface.",
      "html_url": "https://github.com/CambridgeIIS/Gesture_Spotter",
      "stars": 7,
      "forks": 2,
      "language": "Python",
      "topics": [],
      "updated_at": "2024-11-13T19:46:15Z",
      "created_at": "2022-07-18T16:44:35Z",
      "relevance_score": 6,
      "size": 414418,
      "total_score": 16.07
    },
    {
      "id": 938957277,
      "name": "agentic-ai-browser",
      "full_name": "esinecan/agentic-ai-browser",
      "description": "AI-driven web automation agent that uses Playwright for browser interactions and LLM integration for intelligent decision-making. It's designed for reliable, adaptable web automation with robust element detection and contextual understanding. It's single agent by design, and it is built with getting solid benefit out of smaller models in mind.",
      "html_url": "https://github.com/esinecan/agentic-ai-browser",
      "stars": 123,
      "forks": 21,
      "language": "TypeScript",
      "topics": [],
      "updated_at": "2025-06-12T11:13:56Z",
      "created_at": "2025-02-25T19:06:23Z",
      "relevance_score": 5,
      "size": 16064,
      "total_score": 15.23
    },
    {
      "id": 965202392,
      "name": "Brain-tumor-detection-web-app",
      "full_name": "btwitsPratyush/Brain-tumor-detection-web-app",
      "description": "NeuroScan AI represents a breakthrough in medical imaging analysis, combining state-of-the-art deep learning with an intuitive web interface. ",
      "html_url": "https://github.com/btwitsPratyush/Brain-tumor-detection-web-app",
      "stars": 7,
      "forks": 1,
      "language": "TypeScript",
      "topics": [],
      "updated_at": "2025-06-09T17:10:31Z",
      "created_at": "2025-04-12T16:32:13Z",
      "relevance_score": 5,
      "size": 109,
      "total_score": 14.07
    },
    {
      "id": 673944521,
      "name": "Complex-YOLO-ROS-3D-Object-Detection",
      "full_name": "GutlapalliNikhil/Complex-YOLO-ROS-3D-Object-Detection",
      "description": "Complex YOLO ROS is a 3D object detection system interfaced with ROS, enabling real-time robotics applications. It utilizes Lidar data and deep learning techniques for accurate detection and localization of objects in complex environments",
      "html_url": "https://github.com/GutlapalliNikhil/Complex-YOLO-ROS-3D-Object-Detection",
      "stars": 43,
      "forks": 3,
      "language": "Python",
      "topics": [
        "3d-object-detection",
        "autonomous-driving",
        "lidar-point-cloud",
        "object-detection",
        "pointcloud",
        "ros"
      ],
      "updated_at": "2025-06-13T13:13:27Z",
      "created_at": "2023-08-02T19:27:41Z",
      "relevance_score": 3,
      "size": 6744,
      "total_score": 12.43
    },
    {
      "id": 279010452,
      "name": "Object-Detection-for-Graphical-User-Interface",
      "full_name": "chenjshnn/Object-Detection-for-Graphical-User-Interface",
      "description": "Object Detection for Graphical User Interface: Old Fashioned or Deep Learning or a Combination?",
      "html_url": "https://github.com/chenjshnn/Object-Detection-for-Graphical-User-Interface",
      "stars": 127,
      "forks": 29,
      "language": "Python",
      "topics": [],
      "updated_at": "2025-03-11T10:18:46Z",
      "created_at": "2020-07-12T07:00:33Z",
      "relevance_score": 3,
      "size": 26128,
      "total_score": 12.27
    },
    {
      "id": 772215851,
      "name": "chorus-detection",
      "full_name": "dennisvdang/chorus-detection",
      "description": "A deep learning project for automated chorus detection in songs, featuring a command-line interface (CLI) tool that allows users to input a YouTube link and utilize a pre-trained CRNN model to detect chorus sections from a song on YouTube",
      "html_url": "https://github.com/dennisvdang/chorus-detection",
      "stars": 25,
      "forks": 4,
      "language": "Jupyter Notebook",
      "topics": [
        "cnn",
        "data-science",
        "deep-learning",
        "digital-signal-processing",
        "lstm",
        "lstm-neural-networks",
        "machine-learning",
        "music-classification",
        "music-generation",
        "music-information-retrieval",
        "neural-network",
        "rnn",
        "rnn-tensorflow",
        "tensorflow"
      ],
      "updated_at": "2025-05-27T05:16:24Z",
      "created_at": "2024-03-14T18:53:22Z",
      "relevance_score": 4,
      "size": 166303,
      "total_score": 12.25
    },
    {
      "id": 565339514,
      "name": "XAI-Financial-Fraud-Detection-ML-DNN",
      "full_name": "Pa-wan/XAI-Financial-Fraud-Detection-ML-DNN",
      "description": "Implementation of Explainable AI (XAI)-driven Interface and a Proof of Concept (POC) Web Application for Financial Transaction Fraud Detection using Machine Learning and Deep Neural Networks.",
      "html_url": "https://github.com/Pa-wan/XAI-Financial-Fraud-Detection-ML-DNN",
      "stars": 8,
      "forks": 4,
      "language": "Jupyter Notebook",
      "topics": [],
      "updated_at": "2025-06-06T05:15:58Z",
      "created_at": "2022-11-13T04:19:38Z",
      "relevance_score": 4,
      "size": 12311,
      "total_score": 12.08
    },
    {
      "id": 689718885,
      "name": "Brain-Tumor-Detection",
      "full_name": "0xRoneet/Brain-Tumor-Detection",
      "description": "\"Flask-based web app for brain tumor detection. Upload MRI scans, get instant results. Fast, accurate, and user-friendly interface for healthcare professionals. Powered by deep learning technology.\" ",
      "html_url": "https://github.com/0xRoneet/Brain-Tumor-Detection",
      "stars": 7,
      "forks": 3,
      "language": "HTML",
      "topics": [],
      "updated_at": "2025-05-12T11:14:52Z",
      "created_at": "2023-09-10T17:33:42Z",
      "relevance_score": 3,
      "size": 7286,
      "total_score": 9.07
    }
  ],
  "search_summary": {
    "top_languages": {
      "Python": 4,
      "null": 2,
      "TypeScript": 2,
      "Jupyter Notebook": 2,
      "HTML": 1
    },
    "average_stars": 40.54545454545455,
    "most_recent": "2025-06-13T13:13:27Z"
  }
}