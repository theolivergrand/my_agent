#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import os
import sys
import tempfile
from PIL import Image, ImageDraw

def create_test_image():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ UI"""
    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 800x600
    img = Image.new('RGB', (800, 600), color=(240, 240, 240))
    draw = ImageDraw.Draw(img)
    
    # –†–∏—Å—É–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ UI —ç–ª–µ–º–µ–Ω—Ç—ã
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    draw.rectangle([50, 50, 750, 100], fill=(70, 130, 180), outline=(0, 0, 0))
    draw.text((60, 65), "Game Title", fill=(255, 255, 255))
    
    # –ö–Ω–æ–ø–∫–∏
    draw.rectangle([100, 150, 200, 200], fill=(34, 139, 34), outline=(0, 0, 0))
    draw.text((110, 170), "START", fill=(255, 255, 255))
    
    draw.rectangle([250, 150, 350, 200], fill=(220, 20, 60), outline=(0, 0, 0))
    draw.text((260, 170), "EXIT", fill=(255, 255, 255))
    
    # –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    draw.rectangle([500, 150, 700, 300], fill=(255, 255, 255), outline=(0, 0, 0))
    draw.text((510, 160), "Score: 1234", fill=(0, 0, 0))
    draw.text((510, 180), "Level: 5", fill=(0, 0, 0))
    draw.text((510, 200), "Lives: 3", fill=(0, 0, 0))
    
    # –ü–æ–ª–æ—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è
    draw.rectangle([50, 500, 300, 530], fill=(255, 0, 0), outline=(0, 0, 0))
    draw.rectangle([50, 500, 200, 530], fill=(0, 255, 0))
    draw.text((60, 505), "Health: 80%", fill=(255, 255, 255))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    temp_path = os.path.join(tempfile.gettempdir(), "test_ui_screenshot.png")
    img.save(temp_path)
    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {temp_path}")
    return temp_path

def test_agent_import():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    try:
        from agent import UIAnalysisAgent, MOBILE_GAMING_UI_TAXONOMY
        print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∏–º–ø–æ—Ä—Ç UIAnalysisAgent")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–∫—Å–æ–Ω–æ–º–∏—é
        total_tags = sum(len(tags) for tags in MOBILE_GAMING_UI_TAXONOMY.values())
        print(f"‚úÖ –¢–∞–∫—Å–æ–Ω–æ–º–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(MOBILE_GAMING_UI_TAXONOMY)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π, {total_tags} —Ç–µ–≥–æ–≤")
        
        return True
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∞–≥–µ–Ω—Ç–∞: {e}")
        return False

def test_web_app_import():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        from web_app import app
        print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∏–º–ø–æ—Ä—Ç Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        return True
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        print("   –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        return False

def test_directories():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    required_dirs = ['templates', 'static', 'uploads', 'training_dataset']
    all_exist = True
    
    for dir_name in required_dirs:
        if os.path.exists(dir_name):
            print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            all_exist = False
    
    return all_exist

def test_templates():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —à–∞–±–ª–æ–Ω–æ–≤"""
    templates = ['index.html', 'annotate.html', 'dataset.html']
    all_exist = True
    
    for template in templates:
        template_path = os.path.join('templates', template)
        if os.path.exists(template_path):
            print(f"‚úÖ –®–∞–±–ª–æ–Ω {template} –Ω–∞–π–¥–µ–Ω")
        else:
            print(f"‚ùå –®–∞–±–ª–æ–Ω {template} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            all_exist = False
    
    return all_exist

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UI Dataset Web App")
    print("=" * 50)
    
    all_tests_passed = True
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    print("\nüìÅ –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π")
    if not test_directories():
        all_tests_passed = False
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
    print("\nüìÑ –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ HTML —à–∞–±–ª–æ–Ω–æ–≤")
    if not test_templates():
        all_tests_passed = False
    
    # –¢–µ—Å—Ç 3: –ò–º–ø–æ—Ä—Ç –∞–≥–µ–Ω—Ç–∞
    print("\nü§ñ –¢–µ—Å—Ç 3: –ò–º–ø–æ—Ä—Ç UI Analysis Agent")
    if not test_agent_import():
        all_tests_passed = False
    
    # –¢–µ—Å—Ç 4: –ò–º–ø–æ—Ä—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    print("\nüåê –¢–µ—Å—Ç 4: –ò–º–ø–æ—Ä—Ç Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    if not test_web_app_import():
        all_tests_passed = False
    
    # –¢–µ—Å—Ç 5: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    print("\nüñºÔ∏è  –¢–µ—Å—Ç 5: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    try:
        test_image_path = create_test_image()
        print(f"   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {test_image_path}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        all_tests_passed = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 50)
    if all_tests_passed:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("   –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É: python run_web_app.py")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ —É—Å—Ç—Ä–∞–Ω–∏—Ç–µ –∏—Ö")
    
    print("=" * 50)

if __name__ == "__main__":
    main()
