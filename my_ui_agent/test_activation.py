#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Google Cloud Vision + Phi Vision
"""

import os
import sys
from pathlib import Path

def test_google_cloud_vision():
    """–¢–µ—Å—Ç Google Cloud Vision"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Cloud Vision...")
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    credentials_path = "/workspaces/my_agent/gdd-suite-8ae26f5f3853.json"
    if Path(credentials_path).exists():
        os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = credentials_path
        print(f"‚úÖ Credentials —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {credentials_path}")
    else:
        print(f"‚ùå Credentials —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {credentials_path}")
        return False
    
    try:
        from google.cloud import vision
        client = vision.ImageAnnotatorClient()
        print("‚úÖ Google Cloud Vision –∞–∫—Ç–∏–≤–µ–Ω!")
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
        test_image_path = Path("uploads/f3afbec86c89421f88469ece197e8384_Screenshot_2025-01-27_170812.png")
        if test_image_path.exists():
            with open(test_image_path, "rb") as image_file:
                content = image_file.read()
            
            image = vision.Image(content=content)
            response = client.text_detection(image=image)
            texts = response.text_annotations
            
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(texts)} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            if texts:
                print(f"üìù –ü–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç: {texts[0].description[:50]}...")
            
            return True
        else:
            print("‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ API —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Google Cloud Vision: {str(e)}")
        return False

def test_phi_vision():
    """–¢–µ—Å—Ç Phi Vision"""
    print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Phi Vision...")
    
    try:
        import torch
        print(f"‚úÖ PyTorch {torch.__version__} –¥–æ—Å—Ç—É–ø–µ–Ω")
        print(f"üñ•Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {'CUDA' if torch.cuda.is_available() else 'CPU'}")
        
        from transformers import AutoProcessor, AutoModelForCausalLM
        print("‚úÖ Transformers –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ (–±–µ–∑ –º–æ–¥–µ–ª–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏)
        model_name = "microsoft/Phi-3.5-vision-instruct"
        print(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ {model_name}...")
        
        processor = AutoProcessor.from_pretrained(model_name, trust_remote_code=True)
        print("‚úÖ Phi Vision –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω!")
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–Ω–æ–π –º–æ–¥–µ–ª–∏
        print("üß™ –¢–µ—Å—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...")
        test_text = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        messages = [{"role": "user", "content": test_text}]
        text = processor.tokenizer.apply_chat_template(messages, tokenize=False, add_generation_prompt=True)
        
        print("‚úÖ Phi Vision –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("üí° –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ü–æ–ª–Ω–∞—è –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Phi Vision: {str(e)}")
        return False

def test_combined_approach():
    """–¢–µ—Å—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞"""
    print("\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞...")
    
    google_ok = test_google_cloud_vision()
    phi_ok = test_phi_vision()
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ö–¢–ò–í–ê–¶–ò–ò:")
    print(f"{'Google Cloud Vision':.<30} {'‚úÖ –ê–ö–¢–ò–í–ï–ù' if google_ok else '‚ùå –ù–ï–ê–ö–¢–ò–í–ï–ù'}")
    print(f"{'Phi Vision 3.5':.<30} {'‚úÖ –ê–ö–¢–ò–í–ï–ù' if phi_ok else '‚ùå –ù–ï–ê–ö–¢–ò–í–ï–ù'}")
    
    if google_ok and phi_ok:
        print(f"\nüéâ –û–¢–õ–ò–ß–ù–û! –û–±–µ —Å–∏—Å—Ç–µ–º—ã –∞–∫—Ç–∏–≤–Ω—ã!")
        print(f"‚úÖ –ì–æ—Ç–æ–≤ –∫ –≥–∏–±—Ä–∏–¥–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É UI")
        return True
    elif google_ok or phi_ok:
        print(f"\n‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è - –º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π")
        return True
    else:
        print(f"\n‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ - –æ–±–µ —Å–∏—Å—Ç–µ–º—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã")
        return False

def print_usage_recommendations():
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
    print(f"\n" + "="*60)
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ")
    print("="*60)
    
    print("""
üéØ –û–ü–¢–ò–ú–ê–õ–¨–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø –î–õ–Ø UI –ê–ù–ê–õ–ò–ó–ê:

1Ô∏è‚É£ GOOGLE CLOUD VISION:
   ‚Ä¢ –õ—É—á—à–∏–π –≤ –º–∏—Ä–µ OCR –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
   ‚Ä¢ –¢–æ—á–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –ª–∏—Ü
   ‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
   ‚Ä¢ –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å

2Ô∏è‚É£ PHI VISION 3.5:
   ‚Ä¢ –ü–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   ‚Ä¢ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–∫–Ω–æ–ø–∫–∏, —Ñ–æ—Ä–º—ã, –º–µ–Ω—é)
   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞
   ‚Ä¢ –õ–æ–∫–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)

3Ô∏è‚É£ –ì–ò–ë–†–ò–î–ù–´–ô –ü–û–î–•–û–î:
   ‚Ä¢ Google: —Ñ–∞–∫—Ç—ã –∏ –¥–∞–Ω–Ω—ã–µ
   ‚Ä¢ Phi: —Å–º—ã—Å–ª –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
   ‚Ä¢ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ: –ø–æ–ª–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∞ UI

üîß –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ó–ê–ü–£–°–ö–ê:
   ‚Ä¢ python test_ai_vision_setup.py - –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
   ‚Ä¢ python enhanced_agent.py - –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
   ‚Ä¢ python demo_hybrid_vision.py - –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
""")
    print("="*60)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéÆ –ê–ö–¢–ò–í–ê–¶–ò–Ø GOOGLE CLOUD VISION + PHI VISION")
    print("="*60)
    
    success = test_combined_approach()
    print_usage_recommendations()
    
    if success:
        print("\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞! –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –∞–Ω–∞–ª–∏–∑—É UI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
    else:
        print("\nüîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.")

if __name__ == "__main__":
    main()
