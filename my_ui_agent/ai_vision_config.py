# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è AI Vision —Å–µ—Ä–≤–∏—Å–æ–≤
import os
from pathlib import Path
from dotenv import load_dotenv
import logging

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class AIVisionConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è AI Vision —Å–µ—Ä–≤–∏—Å–æ–≤"""
    
    def __init__(self):
        self.setup_logging()
        self.check_environment()
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('ai_vision.log'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
    
    def check_environment(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        self.logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ AI Vision —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Google Cloud Vision
        self.google_vision_available = self._check_google_vision()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Anthropic Claude
        self.claude_available = self._check_claude()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Phi Vision (PyTorch + Transformers)
        self.phi_available = self._check_phi()
        
        # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞
        self._print_status()
    
    def _check_google_vision(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Google Cloud Vision API"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            gcp_credentials = os.getenv('GOOGLE_APPLICATION_CREDENTIALS')
            if gcp_credentials and Path(gcp_credentials).exists():
                from google.cloud import vision
                client = vision.ImageAnnotatorClient()
                self.logger.info("‚úÖ Google Cloud Vision: –î–û–°–¢–£–ü–ï–ù")
                return True
            else:
                self.logger.warning("‚ö†Ô∏è Google Cloud Vision: –û–¢–°–£–¢–°–¢–í–£–Æ–¢ CREDENTIALS")
                return False
        except ImportError:
            self.logger.error("‚ùå Google Cloud Vision: –ë–ò–ë–õ–ò–û–¢–ï–ö–ê –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå Google Cloud Vision: –û–®–ò–ë–ö–ê - {str(e)}")
            return False
    
    def _check_claude(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Anthropic Claude API"""
        try:
            api_key = os.getenv('ANTHROPIC_API_KEY')
            if api_key:
                from anthropic import Anthropic
                client = Anthropic(api_key=api_key)
                self.logger.info("‚úÖ Anthropic Claude: –î–û–°–¢–£–ü–ï–ù")
                return True
            else:
                self.logger.warning("‚ö†Ô∏è Anthropic Claude: –û–¢–°–£–¢–°–¢–í–£–ï–¢ API_KEY")
                return False
        except ImportError:
            self.logger.error("‚ùå Anthropic Claude: –ë–ò–ë–õ–ò–û–¢–ï–ö–ê –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå Anthropic Claude: –û–®–ò–ë–ö–ê - {str(e)}")
            return False
    
    def _check_phi(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Phi Vision (PyTorch + Transformers)"""
        try:
            import torch
            from transformers import AutoModelForCausalLM, AutoProcessor
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ CUDA
            cuda_available = torch.cuda.is_available()
            if cuda_available:
                self.logger.info("‚úÖ Phi Vision: –î–û–°–¢–£–ü–ï–ù (CUDA)")
            else:
                self.logger.info("‚úÖ Phi Vision: –î–û–°–¢–£–ü–ï–ù (CPU)")
            return True
        except ImportError as e:
            self.logger.error(f"‚ùå Phi Vision: –ë–ò–ë–õ–ò–û–¢–ï–ö–ò –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–´ - {str(e)}")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå Phi Vision: –û–®–ò–ë–ö–ê - {str(e)}")
            return False
    
    def _print_status(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        self.logger.info("\n" + "="*50)
        self.logger.info("üìä –°–¢–ê–¢–£–° AI VISION –°–ï–†–í–ò–°–û–í")
        self.logger.info("="*50)
        self.logger.info(f"Google Cloud Vision: {'‚úÖ –î–û–°–¢–£–ü–ï–ù' if self.google_vision_available else '‚ùå –ù–ï–î–û–°–¢–£–ü–ï–ù'}")
        self.logger.info(f"Anthropic Claude:    {'‚úÖ –î–û–°–¢–£–ü–ï–ù' if self.claude_available else '‚ùå –ù–ï–î–û–°–¢–£–ü–ï–ù'}")
        self.logger.info(f"Phi Vision:          {'‚úÖ –î–û–°–¢–£–ü–ï–ù' if self.phi_available else '‚ùå –ù–ï–î–û–°–¢–£–ü–ï–ù'}")
        self.logger.info("="*50)
        
        available_count = sum([self.google_vision_available, self.claude_available, self.phi_available])
        if available_count == 0:
            self.logger.error("üö® –ù–ò –û–î–ò–ù –°–ï–†–í–ò–° –ù–ï –î–û–°–¢–£–ü–ï–ù!")
        elif available_count == 1:
            self.logger.warning("‚ö†Ô∏è –î–û–°–¢–£–ü–ï–ù –¢–û–õ–¨–ö–û –û–î–ò–ù –°–ï–†–í–ò–°")
        else:
            self.logger.info(f"üéâ –î–û–°–¢–£–ü–ù–û {available_count}/3 –°–ï–†–í–ò–°–û–í")
    
    def get_recommended_setup(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É"""
        recommendations = {
            "strategy": "none",
            "primary_service": None,
            "fallback_service": None,
            "setup_instructions": []
        }
        
        if self.claude_available and self.phi_available:
            recommendations["strategy"] = "hybrid"
            recommendations["primary_service"] = "claude"
            recommendations["fallback_service"] = "phi"
            recommendations["setup_instructions"].append("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–∏–±—Ä–∏–¥–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞")
        
        elif self.claude_available:
            recommendations["strategy"] = "claude_only"
            recommendations["primary_service"] = "claude"
            recommendations["setup_instructions"].append("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Claude –¥–ª—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        
        elif self.phi_available:
            recommendations["strategy"] = "phi_only"
            recommendations["primary_service"] = "phi"
            recommendations["setup_instructions"].append("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Phi –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        
        elif self.google_vision_available:
            recommendations["strategy"] = "google_only"
            recommendations["primary_service"] = "google"
            recommendations["setup_instructions"].append("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Google Vision –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        
        else:
            recommendations["setup_instructions"] = [
                "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω AI Vision —Å–µ—Ä–≤–∏—Å:",
                "1. –î–ª—è Claude: –ø–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞ console.anthropic.com",
                "2. –î–ª—è Phi: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PyTorch –∏ Transformers",
                "3. –î–ª—è Google: –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ Google Cloud credentials"
            ]
        
        return recommendations

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_CONFIG = {
    "ANTHROPIC_API_KEY": None,  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ .env
    "GOOGLE_APPLICATION_CREDENTIALS": None,  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ .env
    "PHI_MODEL_NAME": "microsoft/Phi-3.5-vision-instruct",
    "CLAUDE_MODEL_NAME": "claude-3-5-sonnet-20241022",
    "MAX_TOKENS": 1000,
    "TEMPERATURE": 0.7,
    "BATCH_SIZE": 5,
    "RATE_LIMIT_DELAY": 1.0,
}

def create_env_template():
    """–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ .env —Ñ–∞–π–ª–∞"""
    env_template = """# AI Vision Configuration
# –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞: https://console.anthropic.com/
ANTHROPIC_API_KEY=your_anthropic_api_key_here

# –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å credentials –æ—Ç Google Cloud
# –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞: https://console.cloud.google.com/
GOOGLE_APPLICATION_CREDENTIALS=/path/to/your/google-credentials.json

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
PHI_MODEL_NAME=microsoft/Phi-3.5-vision-instruct
CLAUDE_MODEL_NAME=claude-3-5-sonnet-20241022
MAX_TOKENS=1000
TEMPERATURE=0.7
"""
    
    env_path = Path(".env")
    if not env_path.exists():
        with open(env_path, 'w') as f:
            f.write(env_template)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω .env —Ñ–∞–π–ª–∞: {env_path}")
        print("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ —Å–≤–æ–∏–º–∏ API –∫–ª—é—á–∞–º–∏")
    else:
        print("‚ö†Ô∏è –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ .env –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    create_env_template()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = AIVisionConfig()
    recommendations = config.get_recommended_setup()
    
    print("\n" + "="*50)
    print("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ù–ê–°–¢–†–û–ô–ö–ï")
    print("="*50)
    print(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è: {recommendations['strategy']}")
    if recommendations['primary_service']:
        print(f"–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å: {recommendations['primary_service']}")
    if recommendations['fallback_service']:
        print(f"–†–µ–∑–µ—Ä–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å: {recommendations['fallback_service']}")
    
    print("\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:")
    for instruction in recommendations['setup_instructions']:
        print(f"‚Ä¢ {instruction}")
    print("="*50)
